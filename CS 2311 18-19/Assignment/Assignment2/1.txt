#include <iostream>
using namespace std;
 
class triple {
    public:
        // constructor and function declaration
        triple();
        triple(int i, int j, int k);
        triple(const triple &t);
        void getTriple();
        bool compare(triple &a, triple &b);
    private:
        // x, y donate the location of the non-zero value and value stores the non-zero value
        int x, y, value;
};
 
// default contructor
triple::triple() {
    x = 0;
    y = 0;
    value = 0;
}
 
// triple initialization 
triple::triple(int i, int j, int k) {
    x = i + 1;
    y = j + 1;
    value = k;
}
 
// a constructor that copy the location and value to another triple
triple::triple(const triple &t) {
    x = t.x;
    y = t.y;
    value = t.value;
}
 
// this function output the location of the non-zero value and its value to the consolo
void triple::getTriple() {
    cout << x << " " << y << " " << value << endl;
}
 
// this function return true when the value of triple a < the value of triple b
// under the condition that they have the same value, the comparison will continue base on their location
// ie. consider two triple a and b with the corresponding location and value 1 3 4 and 1 1 4
// 1 1 4 will be the smaller triple
bool triple::compare(triple &a, triple &b) {
    if (a.value < b.value) {
        return true;
    }
    else if (a.value == b.value) {
        if (a.x < b.x) {
            return true;
        }
        else if (a.x == b.x) {
            if (a.y < b.y) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}
 
int main() {
    cout << "Please enter the number of rows and columns of the matrix:" << endl;
    int row, col; // row and col donate the number rows and columns of the matrix
    cin >> row >> col;
    cout << "Please enter the matrix:" << endl;
    int tempStore[100]; // this 1d array store all the elements of the desired matrix
    triple t[100]; // t stores triples of the matrix
    for (int i = 0; i < col * row; i++) { // col * row represent the total number of the elements
        cin >> tempStore[i];
    }
    int count = 0;
    cout << "The triple list of matrix is:" << endl;
    // this loop output the non-zero elements and their location
    for (int i = 0; i < col * row; i++) {
        if (tempStore[i] != 0) {
            // i / col donates the x value, i % col donates its y value, these value is store in the triple
            t[count] = triple(i / col, i % col, tempStore[i]); t[count].getTriple();
            count++;
        }
    }
    count = 0;
    triple t_t[100]; // t_t stores triples of the transposed matrix
    cout << "The triple list of transpose of matrix is:" << endl;
    // access the elements in a column-major manner instead of row-major
    for (int j = 0; j < col; j++) {
        for (int i = 0; i < row; i++) {
            if (tempStore[row * i + j] != 0) { // row * i + j allows us to access the elements in the same row first
                t_t[count] = triple((row * i + j) % col, (row * i + j) / col, tempStore[row * i + j]);
                t_t[count].getTriple();
                count++;
            }
        }
    }
    cout << "The sorted triple list of matrix is:" << endl;
    // perform bubble sort to the triple array
    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            // swap them if the later element is small than the current one
            if (t[j].compare(t[j+1], t[j])) {
                triple temp;
                temp = triple(t[j]);
                t[j] = triple(t[j + 1]);
                t[j + 1] = triple(temp);
            } 
        }
    }
    // output the sorted result to the consolo
    for (int i = 0; i < count; i++) {
        t[i].getTriple();
    }
    return 0;
}